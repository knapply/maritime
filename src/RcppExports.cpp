// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ais_version
Rcpp::List ais_version();
RcppExport SEXP _maritime_ais_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(ais_version());
    return rcpp_result_gen;
END_RCPP
}
// ais_decode_strings
Rcpp::List ais_decode_strings(const Rcpp::CharacterVector& x);
RcppExport SEXP _maritime_ais_decode_strings(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ais_decode_strings(x));
    return rcpp_result_gen;
END_RCPP
}
// ais_decode_file
SEXP ais_decode_file(const std::string& file_path, const bool verbose);
RcppExport SEXP _maritime_ais_decode_file(SEXP file_pathSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file_path(file_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ais_decode_file(file_path, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_maritime_ais_version", (DL_FUNC) &_maritime_ais_version, 0},
    {"_maritime_ais_decode_strings", (DL_FUNC) &_maritime_ais_decode_strings, 1},
    {"_maritime_ais_decode_file", (DL_FUNC) &_maritime_ais_decode_file, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_maritime(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
